name: Semantic Versioning

on:
  pull_request:
    types:
      - closed

jobs:
  versioning:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install jq (JSON Processor)
        run: sudo apt-get install -y jq

      - name: Read Current Version
        id: current_version
        run: |
          version=$(jq -r '.version' version.json)
          echo "version=$version" >> $GITHUB_ENV

      - name: Parse Commit Messages
        id: version_bump
        run: |
          # Get commit messages in the PR
          commits=$(gh pr view ${{ github.event.pull_request.number }} --json commits --jq '.commits[].message')

          # Default to no version bump
          bump_type="none"

          # Check for version bump keywords
          if echo "$commits" | grep -q "BREAKING CHANGE:"; then
            bump_type="major"
          elif echo "$commits" | grep -q "^feat:"; then
            bump_type="minor"
          elif echo "$commits" | grep -q "^fix:"; then
            bump_type="patch"
          fi

          echo "bump_type=$bump_type" >> $GITHUB_ENV

      - name: Bump Version
        if: env.bump_type != 'none'
        id: bumped_version
        run: |
          current_version=$version
          bump_type=$bump_type

          # Split the version into parts
          major=$(echo $current_version | cut -d. -f1)
          minor=$(echo $current_version | cut -d. -f2)
          patch=$(echo $current_version | cut -d. -f3)

          # Determine new version based on bump type
          if [ "$bump_type" == "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "$bump_type" == "minor" ]; then
            minor=$((minor + 1))
            patch=0
          elif [ "$bump_type" == "patch" ]; then
            patch=$((patch + 1))
          fi

          new_version="$major.$minor.$patch"
          echo "new_version=$new_version" >> $GITHUB_ENV

          # Update version.json
          jq ".version = \"$new_version\"" version.json > version.tmp && mv version.tmp version.json

      - name: Commit and Tag New Version
        if: env.bump_type != 'none'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add version.json
          git commit -m "chore(release): ${{ env.new_version }}"
          git tag -a "v${{ env.new_version }}" -m "Release ${{ env.new_version }}"
          git push origin ${{ github.ref_name }}
          git push origin --tags
