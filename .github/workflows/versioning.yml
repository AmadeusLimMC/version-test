name: Version Bump with Tags

on:
  pull_request:
    types: [closed]

jobs:
  version-bump:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure full history is fetched

      # Step 2: Fetch all tags and branches
      - name: Fetch all tags and branches
        run: git fetch --all --tags

      # Step 3: Get the current latest tag version or fallback to 1.0.0
      - name: Get latest tag version
        id: get_latest_tag
        run: |
          # Try to get the latest tag from the repository
          LATEST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      # Step 4: Get commit messages from the source branch (Branch A)
      - name: Get commit messages from source branch
        id: get_commits
        run: |
          # Get commit messages from the source branch
          COMMITS=$(git log origin/${{ github.event.pull_request.head.ref }} --pretty=format:'%s')

          # Process each commit type and determine version bumps
          PATCH_INCREMENT=0
          MINOR_INCREMENT=0
          MAJOR_INCREMENT=0

          # Loop through each commit and determine the version bump type
          while IFS= read -r commit; do
            if [[ "$commit" == feat* ]]; then
              MINOR_INCREMENT=1
            elif [[ "$commit" == fix* ]]; then
              PATCH_INCREMENT=1
            elif [[ "$commit" == *BREAKING_CHANGE* ]]; then
              MAJOR_INCREMENT=1
            fi
          done <<< "$COMMITS"

          # Output the increments as environment variables
          echo "PATCH_INCREMENT=$PATCH_INCREMENT" >> $GITHUB_ENV
          echo "MINOR_INCREMENT=$MINOR_INCREMENT" >> $GITHUB_ENV
          echo "MAJOR_INCREMENT=$MAJOR_INCREMENT" >> $GITHUB_ENV

      # Step 5: Calculate the new version based on the latest tag and increments
      - name: Calculate new version
        run: |
          # Extract current version from the latest tag (if it exists)
          if [[ "$LATEST_TAG" == "v0.0.0" ]]; then
            # No tags found, start with v1.0.0
            MAJOR=1
            MINOR=0
            PATCH=0
          else
            # Parse the version from the latest tag
            VERSION_PARTS=(${LATEST_TAG//./ })
            MAJOR=${VERSION_PARTS[0]//v/}  # Remove 'v' from the major version
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
          fi

          # Apply the version increments
          PATCH=$((PATCH + PATCH_INCREMENT))
          MINOR=$((MINOR + MINOR_INCREMENT))
          MAJOR=$((MAJOR + MAJOR_INCREMENT))

          # Reset patch if minor version is bumped
          if [[ $MINOR_INCREMENT -eq 1 ]]; then
            PATCH=0
          fi

          # Reset minor and patch if major version is bumped
          if [[ $MAJOR_INCREMENT -eq 1 ]]; then
            MINOR=0
            PATCH=0
          fi

          # Construct the new version
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      # Step 6: Set committer identity for Git
      - name: Set Git committer identity
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@users.noreply.github.com"

      # Step 7: Create and push new version tag
      - name: Create and push new version tag
        run: |
          # Create a tag for the new version
          git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
          git push origin "v$NEW_VERSION"

      # Step 8: Output the new version
      - name: Output new version
        run: echo "The new version is $NEW_VERSION"
